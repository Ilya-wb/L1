package main

import "fmt"

// Возведение числа в квадрат
func square(num int) {
	fmt.Println(num * num)
}

// В данной функции n раз запускается горутина, где n-количество элементов среза nums
func do() {
	nums := [...]int{2, 4, 6, 8, 10}
	for _, num := range nums {
		go square(num) //запуск горутины (потока), где square()-потоковая функция
	}
	fmt.Scanln()
}

func main() {
	do()
}

// При нескольких запусках программы видно, что квадраты чисел выводятся не последовательно,
// каждый раз в разном порядке. Это говорит о том, что потоки, рассчитывающие квадраты чисел каждый раз
// завершают вычисления в разное время. На низком уровне в операционных системах нет понятия чистого параллелилизма,
// параллелилизм достигается за счет разделения задачи на небольшие подзадачи (кванты). Процессор выполняет каждый
// квант в удобном ему порядке (каждый раз порядок отличается) и из-за этого потоки могут "конкурировать"
// между собой, завершаясь в разное время.
